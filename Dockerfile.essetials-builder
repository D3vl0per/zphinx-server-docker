#############################
### LLVM build from source ##
#############################

## From https://github.com/ziglang/docker-zig

FROM alpine:3.15.0 as essetials-builder

ARG LLVM_VERSION
ARG LLD_VERSION
ARG CLANG_VERSION

RUN apk update \
	&& apk add gcc g++ automake autoconf pkgconfig python2-dev cmake ninja libc-dev binutils zlib-static libstdc++ python3-dev llvm-libunwind-dev

RUN mkdir -p /deps

# llvm
WORKDIR /deps
RUN wget https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VERSION/llvm-$LLVM_VERSION.src.tar.xz \
    && tar xf llvm-$LLVM_VERSION.src.tar.xz \
    && mkdir -p /deps/llvm-$LLVM_VERSION.src/build
WORKDIR /deps/llvm-$LLVM_VERSION.src/build
RUN cmake .. -DCMAKE_INSTALL_PREFIX=/deps/local -DCMAKE_PREFIX_PATH=/deps/local -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_TERMINFO=OFF -G Ninja
RUN ninja install

# lld
WORKDIR /deps
RUN wget https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLD_VERSION/lld-$LLD_VERSION.src.tar.xz \
    && tar xf lld-$LLD_VERSION.src.tar.xz \
    && mkdir -p /deps/lld-$LLD_VERSION.src/build
WORKDIR /deps/lld-$LLD_VERSION.src/build
RUN cmake .. -DCMAKE_INSTALL_PREFIX=/deps/local -DCMAKE_PREFIX_PATH=/deps/local -DCMAKE_BUILD_TYPE=Release -G Ninja
RUN ninja install

# clang
WORKDIR /deps
RUN wget https://github.com/llvm/llvm-project/releases/download/llvmorg-$CLANG_VERSION/clang-$CLANG_VERSION.src.tar.xz \
    && tar xf clang-$CLANG_VERSION.src.tar.xz \
    && mkdir -p /deps/clang-$CLANG_VERSION.src/build
WORKDIR /deps/clang-$CLANG_VERSION.src/build
RUN cmake .. -DCMAKE_INSTALL_PREFIX=/deps/local -DCMAKE_PREFIX_PATH=/deps/local -DCMAKE_BUILD_TYPE=Release -G Ninja
RUN ninja install
